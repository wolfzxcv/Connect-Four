{"version":3,"sources":["context/ContextProvider.jsx","components/Grid.jsx","components/Board.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ContextProvider","createContext","props","board","y","x","push","useState","boardHistory","setBoardHistory","boardResult","setBoardResult","isRedsNext","setIsRedsNext","stopGame","setStopGame","winner","setWinner","announceWinner","win","checkIsFour","a","b","c","d","value","playAgain","window","localStorage","clear","checkIfWin","result","r","handleUndo","dataSaveInLS","slice","pop","setItem","JSON","stringify","console","log","arrForOnlyColor","i","length","map","Provider","InlineBlock","styled","div","CellBG","MarkedColor","color","Grid","eachGrid","useContext","onClick","wholeColumn","filter","sort","find","handlePlacedLocation","BoardSize","Board","useEffect","dataInLS","parse","getItem","getBoardResult","resultR","resultY","type","arr","key","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c18b812.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\r\n\r\nexport const ContextProvider = createContext();\r\n\r\nexport default props => {\r\n  const board = [];\r\n  for (let y = 5; y >= 0; y -= 1) {\r\n    for (let x = 0; x < 7; x += 1) {\r\n      board.push([x, y, 'white']);\r\n    }\r\n  }\r\n\r\n  const [boardHistory, setBoardHistory] = useState([]);\r\n  const [boardResult, setBoardResult] = useState([]);\r\n  const [isRedsNext, setIsRedsNext] = useState(true);\r\n  const [stopGame, setStopGame] = useState(false);\r\n  const [winner, setWinner] = useState('');\r\n\r\n  const handleUndo = () => {\r\n    const dataSaveInLS = boardHistory.slice(0, -1);\r\n\r\n    setBoardHistory(dataSaveInLS);\r\n    setBoardResult(dataSaveInLS.pop());\r\n    localStorage.setItem('Game history', JSON.stringify(dataSaveInLS));\r\n    console.log('undo History', boardHistory.slice(0, -1));\r\n\r\n    const arrForOnlyColor = [];\r\n    for (let i = 0; i < boardResult.length; i += 7) {\r\n      arrForOnlyColor.push(boardResult.map(x => x[2]).slice(i, i + 7));\r\n    }\r\n    console.log('new board', arrForOnlyColor);\r\n  };\r\n\r\n  const playAgain = () => {\r\n    window.localStorage.clear();\r\n    setBoardResult(board);\r\n    setIsRedsNext(true);\r\n    setStopGame(false);\r\n    setWinner('');\r\n  };\r\n\r\n  const announceWinner = win => {\r\n    setWinner(win);\r\n    setStopGame(true);\r\n  };\r\n\r\n  const checkIsFour = (a, b, c, d) => {\r\n    // Check a=b=c=d !=  'white'\r\n    return a !== 'white' && a === b && a === c && a === d;\r\n  };\r\n\r\n  const checkIfWin = result => {\r\n    let r;\r\n    let c;\r\n    // Check vertical\r\n    for (r = 0; r < 3; r++)\r\n      for (c = 0; c < 7; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r + 1][c],\r\n            result[r + 2][c],\r\n            result[r + 3][c]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n\r\n    // Check horizontal\r\n    for (r = 0; r < 6; r++)\r\n      for (c = 0; c < 4; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r][c + 1],\r\n            result[r][c + 2],\r\n            result[r][c + 3]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n\r\n    // Check diagonal down-right\r\n    for (r = 0; r < 3; r++)\r\n      for (c = 0; c < 4; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r + 1][c + 1],\r\n            result[r + 2][c + 2],\r\n            result[r + 3][c + 3]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n\r\n    // Check diagonal down-left\r\n    for (r = 3; r < 6; r++)\r\n      for (c = 0; c < 4; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r - 1][c + 1],\r\n            result[r - 2][c + 2],\r\n            result[r - 3][c + 3]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n  };\r\n\r\n  const value = {\r\n    board,\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    setIsRedsNext,\r\n    playAgain,\r\n    checkIfWin,\r\n    stopGame,\r\n    setStopGame,\r\n    winner,\r\n    boardHistory,\r\n    setBoardHistory,\r\n    handleUndo,\r\n  };\r\n\r\n  return <ContextProvider.Provider value={value} {...props} />;\r\n};\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { ContextProvider } from '../context/ContextProvider';\r\n\r\nconst Grid = ({ eachGrid }) => {\r\n  const {\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    setIsRedsNext,\r\n    checkIfWin,\r\n    stopGame,\r\n    boardHistory,\r\n    setBoardHistory,\r\n  } = useContext(ContextProvider);\r\n\r\n  const handlePlacedLocation = () => {\r\n    // console.log('cell result', eachGrid);\r\n    if (!stopGame) {\r\n      const wholeColumn = boardResult\r\n        .filter(x => x[0] === eachGrid[0])\r\n        .sort((a, b) => a[1] - b[1]);\r\n      // console.log('whole column', wholeColumn);\r\n\r\n      // check if column is still available\r\n      const checkColumnAvailable = wholeColumn.filter(\r\n        x => x[1] === 5 && x[2] === 'white'\r\n      );\r\n\r\n      if (checkColumnAvailable.length > 0) {\r\n        const placeHere = wholeColumn.find(x => x[2] === 'white');\r\n        placeHere[2] = isRedsNext ? 'red' : 'yellow';\r\n        setBoardHistory([...boardHistory, boardResult]);\r\n        localStorage.setItem(\r\n          'Game history',\r\n          JSON.stringify([...boardHistory, boardResult])\r\n        );\r\n\r\n        setBoardResult(boardResult);\r\n        setIsRedsNext(!isRedsNext);\r\n\r\n        // console.log('board result', boardResult);\r\n\r\n        console.log('board history from place', [...boardHistory, boardResult]);\r\n\r\n        const arrForOnlyColor = [];\r\n        for (let i = 0; i < boardResult.length; i += 7) {\r\n          arrForOnlyColor.push(boardResult.map(x => x[2]).slice(i, i + 7));\r\n        }\r\n        console.log('current board', arrForOnlyColor);\r\n        checkIfWin(arrForOnlyColor);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InlineBlock>\r\n      <CellBG\r\n        onClick={() => handlePlacedLocation(eachGrid)}\r\n        eachGrid={eachGrid}\r\n      >\r\n        <MarkedColor color={eachGrid[2]}>\r\n          {` ${eachGrid[0]}, ${eachGrid[1]} `}\r\n        </MarkedColor>\r\n      </CellBG>\r\n    </InlineBlock>\r\n  );\r\n};\r\n\r\nGrid.propTypes = {\r\n  eachGrid: PropTypes.arrayOf(\r\n    PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n  ).isRequired,\r\n};\r\n\r\nconst InlineBlock = styled.div`\r\n  display: inline-block;\r\n`;\r\n\r\nconst CellBG = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: blue;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 146px;\r\n    height: 120px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 95px;\r\n    height: 95px;\r\n  }\r\n`;\r\n\r\nconst MarkedColor = styled.div`\r\n  background: ${props => props.color};\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 26px;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 100px;\r\n    height: 100px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 70px;\r\n    height: 70px;\r\n  }\r\n`;\r\n\r\nexport default Grid;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport Grid from './Grid';\r\nimport { ContextProvider } from '../context/ContextProvider';\r\n\r\nconst Board = () => {\r\n  const {\r\n    board,\r\n    boardHistory,\r\n    setBoardHistory,\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    setIsRedsNext,\r\n    playAgain,\r\n    winner,\r\n    handleUndo,\r\n  } = useContext(ContextProvider);\r\n\r\n  useEffect(() => {\r\n    const dataInLS = JSON.parse(localStorage.getItem('Game history'));\r\n\r\n    if (dataInLS) {\r\n      setBoardHistory(dataInLS);\r\n      console.log('board history from rendering', dataInLS);\r\n      const getBoardResult = dataInLS[dataInLS.length - 1];\r\n      setBoardResult(getBoardResult);\r\n\r\n      const resultR = getBoardResult.filter(x => x[2] === 'red');\r\n      const resultY = getBoardResult.filter(x => x[2] === 'yellow');\r\n\r\n      if (resultR.length > resultY.length) {\r\n        setIsRedsNext(false);\r\n      } else {\r\n        setIsRedsNext(true);\r\n      }\r\n    } else {\r\n      setBoardResult(board);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        Next Player:\r\n        {isRedsNext ? 'Red' : 'Yellow'}\r\n      </div>\r\n      <button type='button' onClick={() => playAgain()}>\r\n        Restart the game\r\n      </button>\r\n\r\n      {winner !== '' && <div>Winner is {winner}</div>}\r\n\r\n      {boardHistory.length > 1 && (\r\n        <button type='button' onClick={() => handleUndo()}>\r\n          Undo movement\r\n        </button>\r\n      )}\r\n\r\n      <BoardSize>\r\n        {boardResult.map(arr => (\r\n          <Grid key={arr} eachGrid={arr} />\r\n        ))}\r\n      </BoardSize>\r\n    </>\r\n  );\r\n};\r\n\r\nconst BoardSize = styled.div`\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media (min-width: 769px) {\r\n    margin-top: 150px;\r\n    width: 1024px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    margin-top: 50px;\r\n    width: 700px;\r\n  }\r\n`;\r\n\r\nexport default Board;\r\n","import React from 'react';\nimport ContextProvider from './context/ContextProvider';\nimport Board from './components/Board';\n\nconst App = () => {\n  return (\n    <ContextProvider>\n      <Board />\n    </ContextProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}