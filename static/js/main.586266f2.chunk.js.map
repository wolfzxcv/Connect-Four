{"version":3,"sources":["hook/useStateHistory.jsx","context/ContextProvider.jsx","components/Grid.jsx","components/Board.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useStateHistory","initalArray","useState","history","setHistory","index","setIndex","newResult","copyOldArrays","JSON","parse","stringify","console","log","slice","ContextProvider","createContext","props","board","y","x","push","boardHistory","setBoardHistory","boardResult","setBoardResult","isRedsNext","setIsRedsNext","stopGame","setStopGame","winner","setWinner","checkWhoNext","data","resultR","filter","resultY","length","announceWinner","win","checkIsFour","a","b","c","d","value","playAgain","window","localStorage","clear","location","reload","checkIfWin","result","r","undo","redo","Provider","InlineBlock","styled","div","CellBG","MarkedColor","color","Grid","eachGrid","useContext","onClick","alert","wholeColumn","sort","find","splice","setItem","arrForOnlyColor","i","map","handlePlacedLocation","BoardSize","Board","useEffect","dataInLS","getItem","type","disabled","arr","key","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.586266f2.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nconst useStateHistory = initalArray => {\r\n  const [history, setHistory] = useState(initalArray);\r\n  const [index, setIndex] = useState(-2);\r\n\r\n  const state = history;\r\n\r\n  const setState = newResult => {\r\n    const copyOldArrays = JSON.parse(JSON.stringify(history));\r\n    setHistory([...copyOldArrays, newResult]);\r\n    setIndex(index + 1);\r\n    // dunno why the last 2 data would be the same, so I remove the last one\r\n    console.log('set history', [...copyOldArrays, newResult].slice(0, -1));\r\n  };\r\n\r\n  return [state, setState, { history, index, setIndex }];\r\n};\r\n\r\nexport default useStateHistory;\r\n","import React, { useState, createContext } from 'react';\r\nimport useStateHistory from '../hook/useStateHistory';\r\n\r\nexport const ContextProvider = createContext();\r\n\r\nexport default props => {\r\n  const board = [];\r\n  for (let y = 5; y >= 0; y -= 1) {\r\n    for (let x = 0; x < 7; x += 1) {\r\n      board.push([x, y, 'white']);\r\n    }\r\n  }\r\n\r\n  // still have problem with history\r\n  const [\r\n    boardHistory,\r\n    setBoardHistory,\r\n    { history, index, setIndex },\r\n  ] = useStateHistory([]);\r\n  const [boardResult, setBoardResult] = useState([]);\r\n  const [isRedsNext, setIsRedsNext] = useState(true);\r\n  const [stopGame, setStopGame] = useState(false);\r\n  const [winner, setWinner] = useState('');\r\n\r\n  const checkWhoNext = data => {\r\n    const resultR = data.filter(x => x[2] === 'red');\r\n    const resultY = data.filter(x => x[2] === 'yellow');\r\n\r\n    if (resultR.length > resultY.length) {\r\n      setIsRedsNext(false);\r\n    } else {\r\n      setIsRedsNext(true);\r\n    }\r\n  };\r\n\r\n  const undo = () => {\r\n    if (index > 0) {\r\n      setIndex(index - 1);\r\n      console.log('show undo result', history[index - 1]);\r\n      setBoardResult(history[index - 1]);\r\n      checkWhoNext(history[index - 1]);\r\n      console.log('show undo index', index - 1);\r\n    } else {\r\n      setBoardResult(board);\r\n      setIsRedsNext(true);\r\n      setIndex(-1);\r\n      console.log('undo, index reset to -1', -1);\r\n    }\r\n  };\r\n\r\n  const redo = () => {\r\n    if (index + 1 < history.length - 1) {\r\n      setIndex(index + 1);\r\n      setBoardResult(history[index + 1]);\r\n      checkWhoNext(history[index + 1]);\r\n      console.log('show redo result', history[index + 1]);\r\n      console.log('show redo index', index + 1);\r\n    }\r\n  };\r\n\r\n  const playAgain = () => {\r\n    window.localStorage.clear();\r\n    window.location.reload();\r\n  };\r\n\r\n  const announceWinner = win => {\r\n    setWinner(win);\r\n    setStopGame(true);\r\n  };\r\n\r\n  const checkIsFour = (a, b, c, d) => {\r\n    // Check a=b=c=d !=  'white'\r\n    return a !== 'white' && a === b && a === c && a === d;\r\n  };\r\n\r\n  const checkIfWin = result => {\r\n    let r;\r\n    let c;\r\n    // Check vertical\r\n    for (r = 0; r < 3; r++)\r\n      for (c = 0; c < 7; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r + 1][c],\r\n            result[r + 2][c],\r\n            result[r + 3][c]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n\r\n    // Check horizontal\r\n    for (r = 0; r < 6; r++)\r\n      for (c = 0; c < 4; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r][c + 1],\r\n            result[r][c + 2],\r\n            result[r][c + 3]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n\r\n    // Check diagonal down-right\r\n    for (r = 0; r < 3; r++)\r\n      for (c = 0; c < 4; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r + 1][c + 1],\r\n            result[r + 2][c + 2],\r\n            result[r + 3][c + 3]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n\r\n    // Check diagonal down-left\r\n    for (r = 3; r < 6; r++)\r\n      for (c = 0; c < 4; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r - 1][c + 1],\r\n            result[r - 2][c + 2],\r\n            result[r - 3][c + 3]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n  };\r\n\r\n  const value = {\r\n    board,\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    setIsRedsNext,\r\n    checkWhoNext,\r\n    playAgain,\r\n    checkIfWin,\r\n    stopGame,\r\n    setStopGame,\r\n    winner,\r\n    boardHistory,\r\n    setBoardHistory,\r\n    undo,\r\n    redo,\r\n    index,\r\n    history,\r\n  };\r\n\r\n  return <ContextProvider.Provider value={value} {...props} />;\r\n};\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { ContextProvider } from '../context/ContextProvider';\r\n\r\nconst Grid = ({ eachGrid }) => {\r\n  const {\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    setIsRedsNext,\r\n    checkIfWin,\r\n    winner,\r\n    index,\r\n    stopGame,\r\n    setBoardHistory,\r\n    history,\r\n  } = useContext(ContextProvider);\r\n\r\n  const handlePlacedLocation = () => {\r\n    // console.log('cell result', eachGrid);\r\n    if (!stopGame) {\r\n      const wholeColumn = boardResult\r\n        .filter(x => x[0] === eachGrid[0])\r\n        .sort((a, b) => a[1] - b[1]);\r\n      // console.log('whole column', wholeColumn);\r\n\r\n      // check if column is still available\r\n      const checkColumnAvailable = wholeColumn.filter(\r\n        x => x[1] === 5 && x[2] === 'white'\r\n      );\r\n\r\n      if (checkColumnAvailable.length > 0) {\r\n        const placeHere = wholeColumn.find(x => x[2] === 'white');\r\n        placeHere[2] = isRedsNext ? 'red' : 'yellow';\r\n\r\n        if (history.length > index + 2) {\r\n          history.splice(index + 1);\r\n          console.log('current index ', index);\r\n          console.log(\r\n            'history.length if remove',\r\n            history.splice(index + 1).length\r\n          );\r\n        }\r\n\r\n        setBoardResult(boardResult);\r\n        setBoardHistory(boardResult);\r\n        // console.log('place would be last history', boardHistory);\r\n        setIsRedsNext(!isRedsNext);\r\n        console.log('result history.length', history.length + 1);\r\n\r\n        localStorage.setItem('Game result', JSON.stringify(boardResult));\r\n\r\n        const arrForOnlyColor = [];\r\n        for (let i = 0; i < boardResult.length; i += 7) {\r\n          arrForOnlyColor.push(boardResult.map(x => x[2]).slice(i, i + 7));\r\n        }\r\n        //   console.log('current board', arrForOnlyColor);\r\n        checkIfWin(arrForOnlyColor);\r\n      }\r\n    } else if (stopGame) {\r\n      alert(`Winner is ${winner}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InlineBlock>\r\n      <CellBG\r\n        onClick={() => handlePlacedLocation(eachGrid)}\r\n        eachGrid={eachGrid}\r\n      >\r\n        <MarkedColor color={eachGrid[2]}>\r\n          {` ${eachGrid[0]}, ${eachGrid[1]} `}\r\n        </MarkedColor>\r\n      </CellBG>\r\n    </InlineBlock>\r\n  );\r\n};\r\n\r\nGrid.propTypes = {\r\n  eachGrid: PropTypes.arrayOf(\r\n    PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n  ).isRequired,\r\n};\r\n\r\nconst InlineBlock = styled.div`\r\n  display: inline-block;\r\n`;\r\n\r\nconst CellBG = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: blue;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 146px;\r\n    height: 120px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 95px;\r\n    height: 95px;\r\n  }\r\n`;\r\n\r\nconst MarkedColor = styled.div`\r\n  background: ${props => props.color};\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 26px;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 100px;\r\n    height: 100px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 70px;\r\n    height: 70px;\r\n  }\r\n`;\r\n\r\nexport default Grid;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport Grid from './Grid';\r\nimport { ContextProvider } from '../context/ContextProvider';\r\n\r\nconst Board = () => {\r\n  const {\r\n    board,\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    checkWhoNext,\r\n    playAgain,\r\n    winner,\r\n    undo,\r\n    redo,\r\n    index,\r\n    history,\r\n    boardHistory,\r\n    setBoardHistory,\r\n  } = useContext(ContextProvider);\r\n\r\n  useEffect(() => {\r\n    const dataInLS = JSON.parse(localStorage.getItem('Game result'));\r\n    setBoardResult(dataInLS || board);\r\n    setBoardHistory(dataInLS || board);\r\n    console.log('render', boardHistory);\r\n\r\n    if (dataInLS) {\r\n      checkWhoNext(dataInLS);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        The first player to connect four of their discs <br />\r\n        horizontally, vertically, or diagonally wins the game.\r\n      </p>\r\n      <button type='button' onClick={() => playAgain()}>\r\n        Restart the game\r\n      </button>\r\n      {winner === '' ? (\r\n        <div> Next Player: {isRedsNext ? 'Red' : 'Yellow'}</div>\r\n      ) : (\r\n        <div>{`Winner is ${winner}`}</div>\r\n      )}\r\n\r\n      <button type='button' onClick={undo} disabled={index < 0}>\r\n        undo\r\n      </button>\r\n      <button\r\n        type='button'\r\n        onClick={redo}\r\n        disabled={index > history.length - 3}\r\n      >\r\n        redo\r\n      </button>\r\n\r\n      <BoardSize>\r\n        {boardResult.map(arr => (\r\n          <Grid key={arr} eachGrid={arr} />\r\n        ))}\r\n      </BoardSize>\r\n    </>\r\n  );\r\n};\r\n\r\nconst BoardSize = styled.div`\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media (min-width: 769px) {\r\n    margin-top: 150px;\r\n    width: 1024px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    margin-top: 50px;\r\n    width: 700px;\r\n  }\r\n`;\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport ContextProvider from './context/ContextProvider';\r\nimport Board from './components/Board';\r\n\r\nconst App = () => {\r\n  return (\r\n    <ContextProvider>\r\n      <Board />\r\n    </ContextProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}