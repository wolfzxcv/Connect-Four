{"version":3,"sources":["context/ContextProvider.jsx","components/Grid.jsx","components/Board.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ContextProvider","createContext","props","board","y","x","push","useState","boardResult","setBoardResult","isRedsNext","setIsRedsNext","value","playAgain","window","localStorage","clear","Provider","InlineBlock","styled","div","CellBG","MarkedColor","color","Grid","eachGrid","useContext","onClick","wholeColumn","filter","sort","a","b","length","find","setItem","JSON","stringify","resultR","resultY","console","log","handleLocation","BoardSize","Board","useEffect","dataInLS","parse","getItem","type","map","arr","key","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed0e03b9.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\r\n\r\nexport const ContextProvider = createContext();\r\n\r\nexport default props => {\r\n  const board = [];\r\n  for (let y = 5; y >= 0; y -= 1) {\r\n    for (let x = 0; x < 7; x += 1) {\r\n      board.push([x, y, 'white']);\r\n    }\r\n  }\r\n\r\n  const [boardResult, setBoardResult] = useState([]);\r\n  const [isRedsNext, setIsRedsNext] = useState(true);\r\n\r\n  const playAgain = () => {\r\n    window.localStorage.clear();\r\n    setBoardResult(board);\r\n    setIsRedsNext(true);\r\n  };\r\n\r\n  const value = {\r\n    board,\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    setIsRedsNext,\r\n    playAgain,\r\n  };\r\n\r\n  return <ContextProvider.Provider value={value} {...props} />;\r\n};\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { ContextProvider } from '../context/ContextProvider';\r\n\r\nconst Grid = ({ eachGrid }) => {\r\n  const { boardResult, setBoardResult, isRedsNext, setIsRedsNext } = useContext(\r\n    ContextProvider\r\n  );\r\n\r\n  const handleLocation = () => {\r\n    // console.log('cell result', eachGrid);\r\n\r\n    const wholeColumn = boardResult\r\n      .filter(x => x[0] === eachGrid[0])\r\n      .sort((a, b) => a[1] - b[1]);\r\n    // console.log('whole column', wholeColumn);\r\n\r\n    // check if column is still available\r\n    const checkColumnAvailable = wholeColumn.filter(\r\n      x => x[1] === 5 && x[2] === 'white'\r\n    );\r\n\r\n    if (checkColumnAvailable.length > 0) {\r\n      const placeHere = wholeColumn.find(x => x[2] === 'white');\r\n      placeHere[2] = isRedsNext ? 'red' : 'yellow';\r\n\r\n      setBoardResult(boardResult);\r\n      setIsRedsNext(!isRedsNext);\r\n      localStorage.setItem('Game result', JSON.stringify(boardResult));\r\n\r\n      const resultR = boardResult.filter(x => x[2] === 'red');\r\n      const resultY = boardResult.filter(x => x[2] === 'yellow');\r\n      console.log('red', resultR);\r\n      console.log('yellow', resultY);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InlineBlock>\r\n      <CellBG onClick={() => handleLocation(eachGrid)} eachGrid={eachGrid}>\r\n        <MarkedColor color={eachGrid[2]} />\r\n      </CellBG>\r\n    </InlineBlock>\r\n  );\r\n};\r\n\r\nGrid.propTypes = {\r\n  eachGrid: PropTypes.arrayOf(\r\n    PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n  ).isRequired,\r\n};\r\n\r\nconst InlineBlock = styled.div`\r\n  display: inline-block;\r\n`;\r\n\r\nconst CellBG = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: blue;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 146px;\r\n    height: 120px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 95px;\r\n    height: 95px;\r\n  }\r\n`;\r\n\r\nconst MarkedColor = styled.div`\r\n  background: ${props => props.color};\r\n  border-radius: 50%;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 100px;\r\n    height: 100px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 70px;\r\n    height: 70px;\r\n  }\r\n`;\r\n\r\nexport default Grid;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport Grid from './Grid';\r\nimport { ContextProvider } from '../context/ContextProvider';\r\n\r\nconst Board = () => {\r\n  const {\r\n    board,\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    setIsRedsNext,\r\n    playAgain,\r\n  } = useContext(ContextProvider);\r\n\r\n  useEffect(() => {\r\n    const dataInLS = JSON.parse(localStorage.getItem('Game result'));\r\n    setBoardResult(dataInLS || board);\r\n\r\n    if (dataInLS) {\r\n      const resultR = dataInLS.filter(x => x[2] === 'red');\r\n      const resultY = dataInLS.filter(x => x[2] === 'yellow');\r\n\r\n      if (resultR.length > resultY.length) {\r\n        setIsRedsNext(false);\r\n      } else {\r\n        setIsRedsNext(true);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        Next Player:\r\n        {isRedsNext ? 'Red' : 'Yellow'}\r\n      </div>\r\n      <button type='button' onClick={() => playAgain()}>\r\n        Restart the game\r\n      </button>\r\n      <BoardSize>\r\n        {boardResult.map(arr => (\r\n          <Grid key={arr} eachGrid={arr} />\r\n        ))}\r\n      </BoardSize>\r\n    </>\r\n  );\r\n};\r\n\r\nconst BoardSize = styled.div`\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media (min-width: 769px) {\r\n    margin-top: 150px;\r\n    width: 1024px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    margin-top: 50px;\r\n    width: 700px;\r\n  }\r\n`;\r\n\r\nexport default Board;\r\n","import React from 'react';\nimport ContextProvider from './context/ContextProvider';\nimport Board from './components/Board';\n\nconst App = () => {\n  return (\n    <ContextProvider>\n      <Board />\n    </ContextProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}