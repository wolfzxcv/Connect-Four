{"version":3,"sources":["hook/useStateHistory.jsx","context/ContextProvider.jsx","components/Grid.jsx","components/Board.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useStateHistory","initalArray","useState","history","setHistory","index","setIndex","state","console","log","undo","redo","length","newResult","copyOldArrays","JSON","parse","stringify","ContextProvider","createContext","props","board","y","x","push","boardHistory","setBoardHistory","boardResult","setBoardResult","isRedsNext","setIsRedsNext","stopGame","setStopGame","winner","setWinner","announceWinner","win","checkIsFour","a","b","c","d","value","playAgain","window","localStorage","clear","checkIfWin","result","r","Provider","InlineBlock","styled","div","CellBG","MarkedColor","color","Grid","eachGrid","useContext","onClick","wholeColumn","filter","sort","find","setItem","arrForOnlyColor","i","map","slice","handlePlacedLocation","BoardSize","Board","useEffect","dataInLS","getItem","resultR","resultY","type","disabled","arr","key","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc28cb29.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nconst useStateHistory = initalArray => {\r\n  const [history, setHistory] = useState(initalArray);\r\n  const [index, setIndex] = useState(0);\r\n\r\n  const state = history;\r\n  console.log('state history', state);\r\n  const setState = newResult => {\r\n    const copyOldArrays = JSON.parse(JSON.stringify(history));\r\n    setHistory([...copyOldArrays, newResult]);\r\n    setIndex(index + 1);\r\n    console.log('history', history);\r\n  };\r\n  let undo;\r\n  let redo;\r\n  if (index > 0)\r\n    undo = () => {\r\n      setIndex(index - 1);\r\n      console.log('undo', history[index - 1]);\r\n    };\r\n  if (index < history.length - 1)\r\n    redo = () => {\r\n      setIndex(index + 1);\r\n      console.log('redo', history[index + 1]);\r\n    };\r\n\r\n  return [\r\n    state,\r\n    setState,\r\n    { history, index, setHistory, setIndex, undo, redo },\r\n  ];\r\n};\r\n\r\nexport default useStateHistory;\r\n","import React, { useState, createContext } from 'react';\r\nimport useStateHistory from '../hook/useStateHistory';\r\n\r\nexport const ContextProvider = createContext();\r\n\r\nexport default props => {\r\n  const board = [];\r\n  for (let y = 5; y >= 0; y -= 1) {\r\n    for (let x = 0; x < 7; x += 1) {\r\n      board.push([x, y, 'white']);\r\n    }\r\n  }\r\n\r\n  // still have problem with history\r\n  const [boardHistory, setBoardHistory, { undo, redo }] = useStateHistory([]);\r\n  const [boardResult, setBoardResult] = useState([]);\r\n  const [isRedsNext, setIsRedsNext] = useState(true);\r\n  const [stopGame, setStopGame] = useState(false);\r\n  const [winner, setWinner] = useState('');\r\n\r\n  const playAgain = () => {\r\n    window.localStorage.clear();\r\n    setBoardResult(board);\r\n    setBoardHistory((boardHistory.length = 0));\r\n    setBoardHistory(board);\r\n    console.log('playAgain', board);\r\n    setIsRedsNext(true);\r\n    setStopGame(false);\r\n    setWinner('');\r\n  };\r\n\r\n  const announceWinner = win => {\r\n    setWinner(win);\r\n    setStopGame(true);\r\n  };\r\n\r\n  const checkIsFour = (a, b, c, d) => {\r\n    // Check a=b=c=d !=  'white'\r\n    return a !== 'white' && a === b && a === c && a === d;\r\n  };\r\n\r\n  const checkIfWin = result => {\r\n    let r;\r\n    let c;\r\n    // Check vertical\r\n    for (r = 0; r < 3; r++)\r\n      for (c = 0; c < 7; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r + 1][c],\r\n            result[r + 2][c],\r\n            result[r + 3][c]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n\r\n    // Check horizontal\r\n    for (r = 0; r < 6; r++)\r\n      for (c = 0; c < 4; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r][c + 1],\r\n            result[r][c + 2],\r\n            result[r][c + 3]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n\r\n    // Check diagonal down-right\r\n    for (r = 0; r < 3; r++)\r\n      for (c = 0; c < 4; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r + 1][c + 1],\r\n            result[r + 2][c + 2],\r\n            result[r + 3][c + 3]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n\r\n    // Check diagonal down-left\r\n    for (r = 3; r < 6; r++)\r\n      for (c = 0; c < 4; c++)\r\n        if (\r\n          checkIsFour(\r\n            result[r][c],\r\n            result[r - 1][c + 1],\r\n            result[r - 2][c + 2],\r\n            result[r - 3][c + 3]\r\n          )\r\n        )\r\n          announceWinner(result[r][c]);\r\n  };\r\n\r\n  const value = {\r\n    board,\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    setIsRedsNext,\r\n    playAgain,\r\n    checkIfWin,\r\n    stopGame,\r\n    setStopGame,\r\n    winner,\r\n    boardHistory,\r\n    setBoardHistory,\r\n    undo,\r\n    redo,\r\n  };\r\n\r\n  return <ContextProvider.Provider value={value} {...props} />;\r\n};\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { ContextProvider } from '../context/ContextProvider';\r\n\r\nconst Grid = ({ eachGrid }) => {\r\n  const {\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    setIsRedsNext,\r\n    checkIfWin,\r\n    stopGame,\r\n    boardHistory,\r\n    setBoardHistory,\r\n  } = useContext(ContextProvider);\r\n\r\n  const handlePlacedLocation = () => {\r\n    // console.log('cell result', eachGrid);\r\n    if (!stopGame) {\r\n      const wholeColumn = boardResult\r\n        .filter(x => x[0] === eachGrid[0])\r\n        .sort((a, b) => a[1] - b[1]);\r\n      // console.log('whole column', wholeColumn);\r\n\r\n      // check if column is still available\r\n      const checkColumnAvailable = wholeColumn.filter(\r\n        x => x[1] === 5 && x[2] === 'white'\r\n      );\r\n\r\n      if (checkColumnAvailable.length > 0) {\r\n        const placeHere = wholeColumn.find(x => x[2] === 'white');\r\n        placeHere[2] = isRedsNext ? 'red' : 'yellow';\r\n\r\n        setBoardResult(boardResult);\r\n        setBoardHistory(boardResult);\r\n        console.log('place', boardHistory);\r\n        setIsRedsNext(!isRedsNext);\r\n\r\n        localStorage.setItem('Game result', JSON.stringify(boardResult));\r\n\r\n        const arrForOnlyColor = [];\r\n        for (let i = 0; i < boardResult.length; i += 7) {\r\n          arrForOnlyColor.push(boardResult.map(x => x[2]).slice(i, i + 7));\r\n        }\r\n        //   console.log('current board', arrForOnlyColor);\r\n        checkIfWin(arrForOnlyColor);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InlineBlock>\r\n      <CellBG\r\n        onClick={() => handlePlacedLocation(eachGrid)}\r\n        eachGrid={eachGrid}\r\n      >\r\n        <MarkedColor color={eachGrid[2]}>\r\n          {` ${eachGrid[0]}, ${eachGrid[1]} `}\r\n        </MarkedColor>\r\n      </CellBG>\r\n    </InlineBlock>\r\n  );\r\n};\r\n\r\nGrid.propTypes = {\r\n  eachGrid: PropTypes.arrayOf(\r\n    PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n  ).isRequired,\r\n};\r\n\r\nconst InlineBlock = styled.div`\r\n  display: inline-block;\r\n`;\r\n\r\nconst CellBG = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: blue;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 146px;\r\n    height: 120px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 95px;\r\n    height: 95px;\r\n  }\r\n`;\r\n\r\nconst MarkedColor = styled.div`\r\n  background: ${props => props.color};\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 26px;\r\n\r\n  @media (min-width: 769px) {\r\n    width: 100px;\r\n    height: 100px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 70px;\r\n    height: 70px;\r\n  }\r\n`;\r\n\r\nexport default Grid;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport Grid from './Grid';\r\nimport { ContextProvider } from '../context/ContextProvider';\r\n\r\nconst Board = () => {\r\n  const {\r\n    board,\r\n    boardResult,\r\n    setBoardResult,\r\n    isRedsNext,\r\n    setIsRedsNext,\r\n    playAgain,\r\n    winner,\r\n    undo,\r\n    redo,\r\n    boardHistory,\r\n    setBoardHistory,\r\n  } = useContext(ContextProvider);\r\n\r\n  useEffect(() => {\r\n    const dataInLS = JSON.parse(localStorage.getItem('Game result'));\r\n    setBoardResult(dataInLS || board);\r\n    setBoardHistory(dataInLS || board);\r\n    console.log('render', boardHistory);\r\n\r\n    if (dataInLS) {\r\n      const resultR = dataInLS.filter(x => x[2] === 'red');\r\n      const resultY = dataInLS.filter(x => x[2] === 'yellow');\r\n\r\n      if (resultR.length > resultY.length) {\r\n        setIsRedsNext(false);\r\n      } else {\r\n        setIsRedsNext(true);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        Next Player:\r\n        {isRedsNext ? 'Red' : 'Yellow'}\r\n      </div>\r\n      <button type='button' onClick={() => playAgain()}>\r\n        Restart the game\r\n      </button>\r\n\r\n      {winner !== '' && <div>Winner is {winner}</div>}\r\n\r\n      <button type='button' onClick={undo} disabled={!undo}>\r\n        undo\r\n      </button>\r\n      <button type='button' onClick={redo} disabled={!redo}>\r\n        redo\r\n      </button>\r\n\r\n      <BoardSize>\r\n        {boardResult.map(arr => (\r\n          <Grid key={arr} eachGrid={arr} />\r\n        ))}\r\n      </BoardSize>\r\n    </>\r\n  );\r\n};\r\n\r\nconst BoardSize = styled.div`\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media (min-width: 769px) {\r\n    margin-top: 150px;\r\n    width: 1024px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    margin-top: 50px;\r\n    width: 700px;\r\n  }\r\n`;\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport ContextProvider from './context/ContextProvider';\r\nimport Board from './components/Board';\r\n\r\nconst App = () => {\r\n  return (\r\n    <ContextProvider>\r\n      <Board />\r\n    </ContextProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}